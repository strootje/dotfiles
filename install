#!/usr/bin/env bash
shopt -s globstar
BASEDIR=$(dirname `readlink -f $0`)
source $BASEDIR/zsh/colors.zsh
source $BASEDIR/zsh/functions.zsh

## Setup values
#######################################

# File created by installer
DOTFILENAME=.dotfiles

# Directory used to install dotfiles
INSTALLDIR=~

# Default groups to install
DGRPS=( base-devel )

# Default packages to auto install
DPKGS=( git vim cmake clang gtest dtags sublime-text-dev )

## Constructor
#######################################
function Bootstrapper {
	# InstallPackages
	SymlinkFiles
}


## Packages
#######################################
CMDEXPAGRP="pacman -Sg"
CMDFINDPKG="pacman -Qi"
CMDINSTPKG="pacman -S --noconfirm"

PKGS=()
function InstallPackages {
	info "Checking packages"
	for grp in ${DGRPS[*]}; do
		CheckGroup $grp
	done

	for pkg in ${DPKGS[*]}; do
		CheckPackage $pkg
	done

echo "$(joinstr " " "${PKGS[@]}")"
	SPKGS="$(joinstr " " "${PKGS[@]}")"
	if ! [ "$SPKGS" == "" ]; then
		if sudo $CMDINSTPKG $SPKGS; then
			success "success installing"
		else
			error "error installing"
		fi
	fi
}

function CheckGroup {
	GRPNAME=$1
	progress "Group $CYELLOW[$CRESET$CGRAY$GRPNAME$CRESET$CYELLOW]$CRESET: expanding..."
	GRPPKGS=("$($CMDEXPAGRP $GRPNAME)")

	missing=false
	for pkg in $GRPPKGS; do
		if [ ! $pkg == $GRPNAME ] && ! $CMDFINDPKG $pkg > /dev/null; then
			missing=true
		fi
	done

	if $missing; then
		if confirm "Group $CYELLOW[$CRESET$CGRAY$GRPNAME$CRESET$CYELLOW]$CRESET: continue installation?"; then
			success "Group $CYELLOW[$CRESET$CGRAY$GRPNAME$CRESET$CYELLOW]$CRESET: installation pending"
			PKGS+=( $GRPNAME )
		else
			success "Group $CYELLOW[$CRESET$CGRAY$GRPNAME$CRESET$CYELLOW]$CRESET: not added"
		fi
	else
		success "Group $CYELLOW[$CRESET$CGRAY$GRPNAME$CRESET$CYELLOW]$CRESET: already installed"
	fi
}

function CheckPackage {
	PKGNAME=$1
	progress "Package $CYELLOW[$CRESET$CGRAY$PKGNAME$CRESET$CYELLOW]$CRESET: looking..."
	if $CMDFINDPKG $PKGNAME > /dev/null; then
		success "Package $CYELLOW[$CRESET$CGRAY$PKGNAME$CRESET$CYELLOW]$CRESET: already installed."
	else
		if confirm "Package $CYELLOW[$CRESET$CGRAY$PKGNAME$CRESET$CYELLOW]$CRESET: continue installation?"; then
			success "Package $CYELLOW[$CRESET$CGRAY$PKGNAME$CRESET$CYELLOW]$CRESET: installation pending."
			PKGS+=($PKGNAME)
		else
			success "Package $CYELLOW[$CRESET$CGRAY$PKGNAME$CRESET$CYELLOW]$CRESET: not added."
		fi
	fi
}


## Symlinking
#######################################
function SymlinkFiles {
	info "Checking symlinks"

	TEMPLATES=$BASEDIR/**/*.tmpl
	for template in $TEMPLATES; do
		ParseConfigTemplate $template
	done

	SYMLINKS=$BASEDIR/**/*.symlink
	for symlink in $SYMLINKS; do
		SymlinkDotfile $INSTALLDIR $symlink
	done
	
	CONFIGPATH=$BASEDIR/config
	SYMLINKS=$CONFIGPATH/**/*.symlink-config
	for symlink in $SYMLINKS; do
		basepath=$(dirname $symlink)
		installpath=${basepath//$CONFIGPATH\//}
		SymlinkConfig $INSTALLDIR/.config/$installpath $symlink
	done
}

function ParseConfigTemplate {
	template=$1
	filename=${template/\.tmpl/}
	tplbase=$(basename $template)
	progress "Template $CYELLOW[$CRESET$CGRAY$tplbase$CRESET$CYELLOW]$CRESET: looking..."

	if [ ! -f $filename ]; then
		symlink=""
		while read line || [[ -n $line ]]; do
			if [[ $line =~ %(.+)% ]]; then
				varname="${BASH_REMATCH[1]}"
				question "Template $CYELLOW[$CRESET$CGRAY$tplbase$CRESET$CYELLOW]$CRESET: <${varname}>: "
				line="${line//%$varname%/$REPLY}"
			fi
			symlink="$symlink$line\n"
		done < $template

		printf "$symlink" > $filename
		success "Template $CYELLOW[$CRESET$CGRAY$tplbase$CRESET$CYELLOW]$CRESET: generated"
	else
		success "Template $CYELLOW[$CRESET$CGRAY$tplbase$CRESET$CYELLOW]$CRESET: already generated"
	fi
}

function SymlinkDotfile {
	targetdir=$1
	symlink=$2

	sympath=$(dirname $symlink)
	symfile=$(basename $symlink)

	progress "Symlink $CYELLOW[$CRESET$CGRAY$filename$CRESET$CYELLOW]$CRESET: converting to dotfile notation"
	SymlinkFile $symlink $targetdir $sympath/.$symfile
}

function SymlinkConfig {
	targetdir=$1
	symlink=$2

	progress "Symlink $CYELLOW[$CRESET$CGRAY$filename$CRESET$CYELLOW]$CRESET: converting to config notation"
	SymlinkFile $symlink $targetdir $symlink
}

function SymlinkFile {
	sourcelink=$1
	targetdir=$2
	symlink=$3
	symbase=$(basename $symlink)
	filename="${symbase%.*}"

	progress "Symlink $CYELLOW[$CRESET$CGRAY$filename$CRESET$CYELLOW]$CRESET: looking..."
	progress "Symlink $CYELLOW[$CRESET$CGRAY$filename$CRESET$CYELLOW]$CRESET: creating directory"
	mkdir -p $targetdir

	progress "Symlink $CYELLOW[$CRESET$CGRAY$filename$CRESET$CYELLOW]$CRESET: creating symlink"
	ln -fs $(readlink -f $sourcelink) $targetdir/$filename

	success "Symlink $CYELLOW[$CRESET$CGRAY$filename$CRESET$CYELLOW]$CRESET: symlink created"
}


################################################################################
### Bootstrap                                                                ###
### ------------------------------------------------------------------------ ###
### translate long args to short args                                        ###
### thanks to:                                                               ###
### https://gist.github.com/adamhotep/895cebf290e95e613c006afbffef09d7       ###
################################################################################
Bootstrapper
