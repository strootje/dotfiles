#!/usr/bin/env bash

## Dryrun
doDryRun=0
## Verbosity
verbose=0
## Templates
declare -A templates
## The cpp project template
##
## Structure:
## ./
##   include/
##   src/
templates[cpp]="include/:src/"
## The node project template
## 
## Structure:
## ./
##   app/
templates[node]="app/"


## Constructor
function Bootstrapper {
	while getopts ":dhvt:" opt; do
		case $opt in
			d) # do dry run
				doDryRun=1
				;;
			h) # show help
				ShowUsage $0
				;;
			v) # verbose
				verbose=1
				;;
			t)
				if [[ ${templates[$OPTARG]} == "" ]]; then
					echo "$0: invalid argument for option -- $opt"
					echo ""
					ShowUsage $0
				else
					projectType=$OPTARG
				fi
				;;
			:) # missing arg
				echo "$0: missing argument for option -- $OPTARG"
				echo ""
				ShowUsage $0
				;;
			\?) # unknown switch
				echo "$0: invalid option -- $OPTARG"
				echo ""
				ShowUsage $0
				;;
		esac
	done

	# shift off all the options
	shift "$((OPTIND-1))"

	projectName=$1
	if [[ -z $projectName ]]; then
		echo "$0: missing argument -- <arg>"
		echo ""
		ShowUsage $0
	fi

	# Create the project
	CreateProject $projectName $projectType
}

## ShowUsage
function ShowUsage {
	echo "USAGE: $1 [-d] [-h] [-v] -t(cpp|node) <arg>"
	echo "  -d        Dry run todo"
	echo "  -h        Show this help"
	echo "  -v        Verbose todo"
	echo "  -t        The type of project"
	echo "  <arg>     The name of the project folder"
	exit 1
}

function log {
	if [[ $verbose -gt 0 ]]; then
		echo $@
	fi
}

## CreateProject
function CreateProject {
	# Param: project name
	projectName=$1
	# Param: project type
	projectType=$2




	template=( $(echo "${templates[$projectType]}" | tr ":" "\n") )
	for path in "${template[@]}"; do
		if [[ $path =~ (.*)/ ]]; then
			log "-- d: $path"
		else
			log "-- f: $path"
		fi
	done
}

# Bootstrap
Bootstrapper $@